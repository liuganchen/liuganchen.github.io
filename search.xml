<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[日常开发常见错误记录]]></title>
    <url>%2F2018%2F03%2F06%2FerrorProcessingRecord%20%2F</url>
    <content type="text"><![CDATA[gson 错误 记录 com.google.gson.stream.MalformedJsonException 1解决办法：检查json字符串的格式，特别是空格，逗号。 根据key 获取value 结果多一个’’’’1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253解决办法，使用(String)强转或者使用getAsString进行格式转化。``` 3. 今天遇到一个gson的深坑，序列化null值```$xslt序列化的时候，null自动被忽略，然后网上找到解决方法：private Gson gson2 = new GsonBuilder().serializeNulls().create();然后有意思的事情出现了，null -&gt; &quot;null&quot; .于是我各种找，各种判断，写自己的TypeFactory，搞了好久（半个下午）。最后突然发现 ，在最后的result.toString后面加个replaceAll不就行了吗。现在的心情感觉什么都不好了！``` ### select2插件问题1. select2（ajax获取请求） 选中不显示的问题```$xslt$(&quot;#seal_code&quot;).select2(&#123; ajax: &#123; type: &apos;POST&apos;, url: &quot;./public/getSealsLikeSealId&quot;, dataType: &apos;json&apos;, delay: 500, data: function (params) &#123; return &#123; q: params.term, // search term 请求参数 ， 请求框中输入的参数 &#125;; &#125;, processResults: function (data) &#123; $(&quot;#seal_code&quot;).select2(&quot;val&quot;, &quot;&quot;); var itemList = [];//当数据对象不是&#123;id:0,text:&apos;ANTS&apos;&#125;这种形式的时候，可以使用类似此方法创建新的数组对象 if (data == null || data === []) &#123; &#125; else &#123; for (var i = 0; i &lt; data.length; i++) &#123; itemList.push(&#123;id: i, text: data[i]&#125;) &#125; &#125; console.log(itemList); return &#123; results: itemList, &#125;; &#125;, cache: true &#125;, placeholder: &apos;请选择&apos;,//默认文字提示 language: &quot;zh-CN&quot;, allowClear: true,//允许清空 width: &apos;158px&apos;, escapeMarkup: function (markup) &#123; return markup; &#125;, minimumInputLength: 4 &#125;); 解决方案： itemList.push(&#123;id: i, text: data[i]&#125;) -》 itemList.push(&#123;id: i+1 , text: data[i]&#125;)]]></content>
      <categories>
        <category>Exception</category>
      </categories>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java开发常用类库]]></title>
    <url>%2F2018%2F02%2F24%2Futil%2F</url>
    <content type="text"><![CDATA[json 类库 gosn: 谷歌的开发的json操作工具 优点 ○提供一种像toString()和构造方法的很简单的机制(toJson()，fromJson())，来实现Java 对象和Json之间的互相转换。○允许已经存在的无法改变的对象，转换成Json，或者Json转换成已存在的对象。○允许自定义对象的表现形式○支持任意的复杂对象○能够生成可压缩和可读的Json的字符串输出。○依赖包少，只有一个jar核心包，无其他依赖。○Gson安全稳定，无漏洞。（Fastjson出现过漏洞） 出处 引入 123456789&lt;dependency&gt; &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt; &lt;artifactId&gt;gson&lt;/artifactId&gt; &lt;version&gt;2.3.1&lt;/version&gt; &lt;/dependency&gt; 使用 json字符串 → Javabean 1User user = new Gson().fromJson(string, User.class); json字符串 → map(hash) 12345 Map&lt;String, String&gt; map = gson.fromJson(json, HashMap.class); ``` 4. json字符串 → list&lt;T&gt;```$xslt List&lt;Person&gt; persons =gson.fromJson(json, new TypeToken&lt;List&lt;Person&gt;&gt;() &#123;&#125;.getType()); object → json 字符串 123String string = new Gson().toJson(list);String string = new Gson().toJson(map);String string = new Gson().toJson(user); 从json字符串取值 1234//把 json字符串 变成一个 element JsonElement element = new JsonParser().parse(json);//获取 节点 elvalues = (JsonObject) element.getAsJsonObject().get(&quot;elkey&quot;); 给一个 json 赋值 1234//创建一个jsonJsonObject result = new JsonObject();//添加 节点 （property，element）result.add(&quot;body&quot;, element);//element 可以是 JsonObject , JsonArray , JsonNull , JsonPrimitive 中的一个 补充 JsonElement 该类是一个抽象类，代表着json串的某一个元素。这个元素可以是一个Json(JsonObject)、可以是一个数组(JsonArray)、可以是一个Java的基本类型(JsonPrimitive)、当然也可以为null(JsonNull);JsonObject,JsonArray,JsonPrimitive，JsonNull都是JsonElement这个抽象类的子类。JsonElement提供了一系列的方法来判断当前的JsonElement是否是上述子类的一种：比如isJsonObject()用来判断当前的json元素是否是一个数组类型，它的实现很简单且这里巧妙地应用了Java的多态机制： public boolean isJsonObject() { return this instanceof JsonObject; } 同样的既然有isJsonObject()等这样的判断，该类也提供了把当前JsonElement作为上述子类的一种返回的方法： public JsonObject getAsJsonObject() { if (isJsonObject()) { return (JsonObject) this; } throw new IllegalStateException(&quot;Not a JSON Object: &quot; + this); } 待续……]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>类库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何编写一个好看的md文件]]></title>
    <url>%2F2018%2F02%2F23%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[入门今天看的一篇入门md教程 : 链接 ……]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>md</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue.js 学习之旅]]></title>
    <url>%2F2018%2F02%2F23%2Fvue_study%2F</url>
    <content type="text"><![CDATA[vue.js 初识vue.js 及其 文档 最早接触 vue.js 是在16年，然而因兼容性问题，项目中并不能使用vue.js (灬ꈍ ꈍ灬)。 百科:Vue.js(读音 /vjuː/, 类似于 view)是一个构建数据驱动的 web 界面的渐进式框架。Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。 学习一个新的HTML框架，先看代码，循序渐进。简单代码 &lt;div id=&quot;app&quot;&gt; &lt;/div&gt; var app = new Vue({ el: &#39;#app&#39;, data: { message: &#39;Hello Vue!&#39; } }) 显然，html 代码和 JavaScript 代码 就这样结合在了一起。 很方便的解决了jQuery $. $. 的问题 ，前人栽树，后人乘凉！ 待续……]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>vue.js</tag>
        <tag>HTML框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇文章]]></title>
    <url>%2F2018%2F02%2F22%2F2.22%2F</url>
    <content type="text"><![CDATA[新的一年，新的开始！让我们开始吧！]]></content>
  </entry>
</search>
